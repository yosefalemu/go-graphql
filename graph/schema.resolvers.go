package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/yosefalemu/go-graphql.git/graph/model"
)

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	movieID := uuid.New()
	newMovie := model.Movie{
		ID:          movieID.String(),
		Title:       input.Title,
		URL:         input.URL,
		ReleaseDate: input.ReleaseDate,
	}

	result := r.DB.Create(&newMovie)

	if result.Error != nil {
		return nil, result.Error
	}

	return &newMovie, nil
}

// CreateActor is the resolver for the createActor field.
func (r *mutationResolver) CreateActor(ctx context.Context, input model.NewActor) (*model.Actor, error) {
	actorID := uuid.New()
	newActor := model.Actor{
		ID:   actorID.String(),
		Name: input.Name,
	}

	result := r.DB.Create(&newActor)

	if result.Error != nil {
		return nil, result.Error
	}

	return &newActor, nil
}

// UpdateMovie is the resolver for the updateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, input model.UpdateMovie) (*model.Movie, error) {
	panic(fmt.Errorf("not implemented: UpdateMovie - updateMovie"))
}

// UpdateActor is the resolver for the updateActor field.
func (r *mutationResolver) UpdateActor(ctx context.Context, input model.UpdateActor) (*model.Actor, error) {
	panic(fmt.Errorf("not implemented: UpdateActor - updateActor"))
}

// DeleteMovie is the resolver for the deleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteMovie - deleteMovie"))
}

// DeleteActor is the resolver for the deleteActor field.
func (r *mutationResolver) DeleteActor(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteActor - deleteActor"))
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	var movies []*model.Movie

	result := r.DB.Find(&movies)

	if result.Error != nil {
		return nil, result.Error
	}

	return movies, nil
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, id string) (*model.Movie, error) {
	panic(fmt.Errorf("not implemented: Movie - movie"))
}

// Actors is the resolver for the actors field.
func (r *queryResolver) Actors(ctx context.Context) ([]*model.Actor, error) {
	var actors []*model.Actor

	result := r.DB.Find(&actors)

	if result.Error != nil {
		return nil, result.Error
	}

	return actors, nil
}

// Actor is the resolver for the actor field.
func (r *queryResolver) Actor(ctx context.Context, id string) (*model.Actor, error) {
	panic(fmt.Errorf("not implemented: Actor - actor"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *actorResolver) CreatedAt(ctx context.Context, obj *model.Actor) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}
func (r *actorResolver) UpdatedAt(ctx context.Context, obj *model.Actor) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}
func (r *Resolver) Actor() ActorResolver { return &actorResolver{r} }
type actorResolver struct{ *Resolver }
*/
